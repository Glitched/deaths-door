"""
This type stub file was generated by pyright.
"""

from __future__ import annotations

import threading
from typing import Any, Callable

from .base_classes import Baseevents, Baserequests

LOG = ...

class obsws:  # noqa: N801
    """
    Core class for using obs-websocket-py

    Simple usage: (v5 api)
        >>> from obswebsocket import obsws, requests
        >>> client = obsws("localhost", 4455, "secret")
        >>> client.connect()
        >>> client.call(requests.GetVersion()).getObsVersion()
        '29.0.0'
        >>> client.disconnect()

    Legacy usage: (v4 api)
        >>> from obswebsocket import obsws, requests
        >>> client = obsws("localhost", 4444, "secret", legacy=True)
        >>> client.connect()
        >>> client.call(requests.GetVersion()).getObsStudioVersion()
        '25.0.0'
        >>> client.disconnect()

    For advanced usage, including events callback, see the 'samples' directory.
    """
    def __init__(
        self,
        host: str = ...,
        port: int = ...,
        password: str = ...,
        legacy: bool = ...,
        timeout: int = ...,
        authreconnect: int = ...,
        on_connect: Callable[[obsws], Any] = ...,
        on_disconnect: Callable[[obsws], Any] = ...,
    ) -> None:
        """
        Construct a new obsws wrapper

        :param host: Hostname to connect to
        :param port: TCP Port to connect to (Default is 4444)
        :param password: Password for the websocket server (Leave this field empty if auth is not enabled)
        :param legacy: Server is using old obs-websocket protocol (v4). Default is v5 (False) except if port is 4444.
        :param timeout: How much seconds to wait for an answer after sending a request.
        :param authreconnect: Try to reconnect if websocket is closed, value is number of seconds between attemps.
        :param on_connect: Function to call after successful connect, with parameter (obsws)
        :param on_disconnect: Function to call after successful disconnect, with parameter (obsws)
        """
        ...

    def connect(self) -> None:
        """
        Connect to the websocket server

        :return: Nothing
        """
        ...

    def reconnect(self) -> None:
        """
        Restart the connection to the websocket server

        :return: Nothing
        """
        ...

    def disconnect(self) -> None:
        """
        Disconnect from websocket server

        :return: Nothing
        """
        ...

    def call(self, obj: Baserequests) -> Baserequests:
        """
        Make a call to the OBS server through the Websocket.

        :param obj: Request (class from obswebsocket.requests module) to send
            to the server.
        :return: Request object populated with response data.
        """
        ...

    def register(
        self, func: Callable[..., Any], event: Baseevents | None = None
    ) -> None:
        """
        Register a new hook in the websocket client

        :param func: Callback function pointer for the hook
        :param event: Event (class from obswebsocket.events module) to trigger
            the hook on. Default is None, which means trigger on all events.
        :return: Nothing
        """
        ...

    def unregister(
        self, func: Callable[..., Any], event: Baseevents | None = None
    ) -> None:
        """
        Unregister a new hook in the websocket client

        :param func: Callback function pointer for the hook
        :param event: Event (class from obswebsocket.events module) which
            triggered the hook on. Default is None, which means unregister this
            function for all events.
        :return: Nothing
        """
        ...

class RecvThread(threading.Thread):
    def __init__(self, core: obsws) -> None: ...
    def run(self) -> None: ...
    def build_event(self, data: Any) -> Any:
        # TODO: Data can be more strongly typed
        ...

class ReconnectThread(threading.Thread):
    def __init__(self, core: obsws) -> None: ...
    def run(self) -> None: ...

class EventManager:
    def __init__(self) -> None: ...
    def register(
        self, callback: Callable[[Baseevents], Any], trigger: Baseevents | None = None
    ) -> None: ...
    def unregister(
        self, callback: Callable[[Baseevents], Any], trigger: Baseevents | None = None
    ) -> None: ...
    def trigger(self, data: Baseevents) -> None: ...
